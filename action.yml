name: 'Deploy to Optimizely DXP'
description: 'Deploy site to Optimizely Digital Experience Platform DXP via PowerShell'
author: 'LuminosLabs'

branding:
  icon: "upload-cloud"
  color: "purple"

inputs:
  artifact-name: 
    description: 'The uploaded artifact name.'
    required: true
  artifact-download-path:
    description: 'Download path for the .nupkg package'
    required: false
    default: optimizely-dxp-deploy
  artifact-file-name:
    description: 'Naming accepted by opti <app name>.<package type>.app.<version>.nupkg'
    required: true
  optimizely-project-id:
    description: 'Optimizely Project Id'
    required: true
  optimizely-api-key:
    description: 'Optimizely API Key'
    required: true
  optimizely-api-secret:
    description: 'Optimizely API Secret'
    required: true
  optimizely-environment:
    description: 'Environment to deploy'
    required: false
    default: 'Integration'
  optimizely-direct-deploy:
    description: 'Enable direct deploy in DXP'
    required: false
    default: 'true'
  optimizely-autocomplete-deploy:
    description: 'Autocomplete deployment in DXP'
    required: false
    default: 'false'
outputs:
  operation-id:
    description: 'Deploy Id'
    value: ${{ steps.deploy-to-environment.outputs.operation-id }} || ${{ steps.direct-deploy-to-environment.outputs.operation-id }}
runs:
  using: 'composite'
  steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-download-path }}
    - name: List contents of publish directory after archiving
      run: |
        ls "${{ github.workspace }}\${{ inputs.artifact-download-path }}"
      shell: pwsh
    - name: Install modules
      run: |
        Write-Host "`n`nStarting Installation..."
        $packageProvider = Get-PackageProvider -Name NuGet -ErrorAction SilentlyContinue
        if ($packageProvider)
        {
          Write-Output "NuGet package provider $($packageProvider.Version) is already installed"
        }
        else
        {
          Write-Output "Attempting to install NuGet package provider"
          Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -ForceBootstrap -Confirm:$false -Verbose
        }
        Write-Host "`n`nInstall EpiCloud..."
        Install-Module -Name EpiCloud -Verbose -AcceptLicense -Scope CurrentUser -Force 
        Write-Host "`n`nInstall Azure Storage..."
        Install-Module -Name Azure.Storage -Scope CurrentUser -Repository PSGallery -Force -AllowClobber -Verbose
      shell: pwsh
    - name: Upload .nupkg to DXP
      run: |
        $packageName = "${{ github.workspace }}\${{ inputs.artifact-download-path }}\${{ inputs.artifact-file-name }}"  
        Write-Host "`n`nImport Azure Storage and EpiCloud..."
        Import-Module Azure.Storage 
        Import-Module EpiCloud
        # Connect EpiCloud using credentials from portal
        Connect-EpiCloud -ProjectId "${{ inputs.optimizely-project-id }}" -ClientKey "${{ inputs.optimizely-api-key }}" -ClientSecret "${{ inputs.optimizely-api-secret }}"
        # Upload .NET Core to blob storage
        $sasUrl = Get-EpiDeploymentPackageLocation
        Add-EpiDeploymentPackage -SasUrl $sasUrl -Path $packageName -Verbose
      shell: pwsh
    - name: Direct Deploy .nupkg to Target Environment
      if: ${{ inputs.optimizely-direct-deploy == 'true' }}
      id: direct-deploy-to-environment
      run: |
        Write-Host "`n`nImport Azure Storage and EpiCloud..."
        $packageName = "${{ inputs.artifact-file-name }}" 
        Import-Module Azure.Storage 
        Import-Module EpiCloud
        # Connect EpiCloud using credentials from portal
        Connect-EpiCloud -ProjectId "${{ inputs.optimizely-project-id }}" -ClientKey "${{ inputs.optimizely-api-key }}" -ClientSecret "${{ inputs.optimizely-api-secret }}"
        # Deploy package to environment. This will first build a docker image out of the package and then deploy it to the target environment.
        # !!! DIRECT_DEPLOY MUST BE $true FOR INTEGRATION ENVIRONMENT AND $false FOR PREPRODUCTION/PRODUCTION
        $directDeployInformation = Start-EpiDeployment -DeploymentPackage $packageName -TargetEnvironment "${{ inputs.optimizely-environment }}" -DirectDeploy -Wait -Verbose
        Write-Host "Direct deploy object: "
        Write-Host $directDeployInformation
        Write-Host "Direct deploy id: "
        Write-Host $directDeployInformation.id
        Write-Output "operation-id=$($directDeployInformation.id)" >> $Env:GITHUB_OUTPUT
      shell: pwsh
    - name: Deploy .nupkg to Target Environment
      if: ${{ inputs.optimizely-direct-deploy != 'true' }}
      id: deploy-to-environment
      run: |
        Write-Host "`n`nImport Azure Storage and EpiCloud..."
        $packageName = "${{ inputs.artifact-file-name }}" 
        Import-Module Azure.Storage 
        Import-Module EpiCloud
        # Connect EpiCloud using credentials from portal
        Connect-EpiCloud -ProjectId "${{ inputs.optimizely-project-id }}" -ClientKey "${{ inputs.optimizely-api-key }}" -ClientSecret "${{ inputs.optimizely-api-secret }}"
        # Deploy package to environment. This will first build a docker image out of the package and then deploy it to the target environment.
        $deployInformation = Start-EpiDeployment -DeploymentPackage $packageName -TargetEnvironment "${{ inputs.optimizely-environment }}" -Wait -Verbose
        Write-Host "Direct deploy object: "
        Write-Host $deployInformation
        Write-Host "Direct deploy id: "
        Write-Host $deployInformation.id
        Write-Output "operation-id=$($deployInformation.id)" >> $Env:GITHUB_OUTPUT
      shell: pwsh

      - name: Autocomplete Deployment
      if: ${{ inputs.optimizely-autocomplete-deploy == 'true' }}
      id: autocomplete-deploy
      run: |
          # Poll deployment status until completion or failure
          $maxAttempts = 180 # 1.5 hours total (180 * 30 seconds = 5400 seconds = 90 minutes)
          $attempts = 0
          $isComplete = $false
          $deploymentId = "${{ steps.deploy-to-environment.outputs.operation-id }}"
          if (-not $deploymentId) {
            $deploymentId = "${{ steps.direct-deploy-to-environment.outputs.operation-id }}"
          }

          Write-Host "`n`nPolling deployment status until complete..."
          
          do {
            $attempts++
            $deploymentStatus = Get-EpiDeployment -Id $deploymentId
            $percentComplete = $deploymentStatus.percentComplete
            
            Write-Host "Attempt $attempts - Deployment status: $($deploymentStatus.status), Percent complete: $percentComplete%"
            
            # Check if deployment is complete
            if ($percentComplete -eq 100) {
                $isComplete = $true
                Write-Host "Deployment is complete!"
            }
            # Check for failures
            elseif ($deploymentStatus.status -eq "Failed") {
                Write-Error "Deployment failed with status: $($deploymentStatus.status)"
                Write-Error "Deployment errors: $($deploymentStatus.deploymentErrors | ConvertTo-Json -Depth 3)"
                exit 1
            }
            # Check timeout
            elseif ($attempts -ge $maxAttempts) {
                Write-Error "Deployment timed out after $attempts attempts"
                exit 1
            }
            # Wait before next attempt
            else {
                Write-Host "Waiting 30 seconds before next check..."
                Start-Sleep -Seconds 30
            }
          } while (-not $isComplete)
          
          # Complete the deployment after successful completion
          Write-Host "Waiting 30 seconds before completing deployment..."
          Start-Sleep -Seconds 30
          Write-Host "`n`nFinalizing deployment..."
          Complete-EpiDeployment -Id $deploymentId
          $attempts = 0
          $isComplete = $false
          do {
            $attempts++
            $deploymentStatus = Get-EpiDeployment -Id $deploymentId
            
            Write-Host "Attempt $attempts - Deployment status: $($deploymentStatus.status), Percent complete: $($deploymentStatus.percentComplete)% "
            
            # Check if deployment is complete
            if ($deploymentStatus.status -eq "Succeeded") {
                $isComplete = $true
                Write-Host "Deployment is complete!"
            }
            # Check for failures
            elseif ($deploymentStatus.status -eq "Failed") {
                Write-Error "Deployment failed with status: $($deploymentStatus.status)"
                Write-Error "Deployment errors: $($deploymentStatus.deploymentErrors | ConvertTo-Json -Depth 3)"
                exit 1
            }
            # Check timeout
            elseif ($attempts -ge $maxAttempts) {
                Write-Error "Deployment timed out after $attempts attempts"
                exit 1
            }
            # Wait before next attempt
            else {
                Write-Host "Waiting 30 seconds before next check..."
                Start-Sleep -Seconds 30
            }
          } while (-not $isComplete)
          Write-Host "Deployment successfully completed!"
      shell: pwsh